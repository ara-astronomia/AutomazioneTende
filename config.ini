# le impostazioni di setup per pin GPIO che utilizzano interruttori, devono essere: GPIO.setup(pin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
# dove pin rappresenta il numero del pin nel formato scelto per il setup del GPIO, BOARD O BMC,
# GPIO.IN imposta il pin per un segnale di ingresso
# pull_up_down=GPIO.PUD_UP definiscono lo stato del pin fintanto che non viene premuto l'interruttore. in questo caso alto
# che diventa basso quando premendo l'interruttore il pin in questione vine messo a massa.

[server]
ip = 127.0.0.1
port = 3030
loopback_ip = 0.0.0.0

[automazione]
loggingLevel = 10
# 10 debug
# 20 info
# 30 warning
# 40 error
# 50 critical
sleep = 0
theskyx_server = 127.0.0.1
altaz_mount_file = MountGetAltAzi.js
park_tele_file = SetTelPark.js
est_min_height = 30
est_max_height = 60
ovest_min_height = 30
ovest_max_height = 60
diff_al=0
diff_azi=0

[motor_board]
#setup con GPIO.BOARD i numeri rappresentano il numero del pin
# pin 31 per segnale motore tenda est
motorE_A = 31
# pin 33 per segnale motore tenda est
motorE_B = 33
# pin 29 per enable motore tenda est
motorE_E = 29

# pin 38 per segnale motore tenda ovest
motorW_A = 38
# pin 40 per segnale motore tenda ovest
motorW_B = 40
# pin 36 per enable motore tenda ovest
motorW_E = 36

#corsa e passo_cinghia, queste due chiavi sono state previste qual'ora si utilizzasse un particolare harware per gli encoder
# corsa del braccio traente espressa in mm
corsa = 700
# passo della cinghia dentata di movimentazione encoder
passo_cinghia = 6

[encoder_board]
#setup con GPIO.BOARD i numeri rappresentano il numero del pin on board
# pin 12 per clock encoder tenda est
clk_e = 12
# pin 16 per dt encoder teda est
dt_e = 16
# pin 18 per clock encoder tenda ovest
clk_w = 18
# pin 22 per dt encoder tenda ovest
dt_w= 22

[encoder_step]
# n di step per giro encoder
n_step = 20
# n step totali per escursione completa tenda
n_step_corsa = 350
# potrebbe essere necessario per motori non dotati di fine corsa
n_step_sicurezza =  360
# usare il metodo semplice per leggere gli encoder? (1 o 0)
count_steps_simple = 0

[azimut]
#rappresentano i valori massimi di altezza e azimut delle tende rilevati ai quattro angoli. questi parametri forse non andranno utilizzati
azNE = 20
azSE = 160
azSW = 190
azNW = 340

[altezza]
altNE = ''
altSE = ''
altSW = ''
altNW = ''

[funzione_altezza]
#eventuale funzione per correzione altezze in funzione dell'azimut
funE = ''
funW = ''

[tende]
#altezza massima delle tende in valore di alt
max_est = 70
max_west = 70
# altezza minima per tende chiuse in valore di alt
park_est = 0
park_west = 0

[alt_min_tel]
#altezza minima di puntamento del telescopio per tende completamente chiuse
alt_min_tel_e = ''
alt_min_tel_w = ''

[curtains_limit_switch]
#controlli per ora non inseriti nel codice, ma che potrebbero essere necessari o opportuni
#in particolare queste chiavi fanno un check sullo stato dei fine corsa della tenda in apertura e in chiusura.
# pin 35 per finecorsa tenda_W aperta
curtain_W_verify_open = 35
# pin 37 per finecorsa tenda_W chiusa
curtain_W_verify_closed= 37
# pin 15 per finecorsa tenda_E aperta
curtain_E_verify_open = 15
# pin 32 per finecorsa tenda_E chiusa
curtain_E_verify_closed = 32

[roof_board]
# Pin 11 per tetto chiuso-- VERIFICARE LO STATO DELL'INTERRUTTORE RISPETTO AL VALORE IMPOSTATO
roof_verify_closed = 11
# Pin 7 per tetto aperto -- VERIFICARE LO STATO DELL'INTERRUTTORE RISPETTO AL VALORE IMPOSTATO
roof_verify_open = 7
# pin 13 per comando apertura/chiusura tetto -- IN OPEN E CLOSED IL PIN Ãˆ LO STESSO, CAMBIA IL VALORE DA HIGH A LOW IN ROOF_CONTROL
switch_roof = 13
# default max timeout in milliseconds waiting for an endge
wait_for_timeout = 180000
# default bouncetime in an edge change event
event_bouncetime = 0
